[alias]
    # Get the current branch name (not so useful in itself, but used in
    # other aliases)
    branch-name = "!git rev-parse --abbrev-ref HEAD"
    # Push the current branch to the remote "origin", and set it to track
    # the upstream branch
    publish = "!f() { git push -u origin ${1-$(git branch-name)}; }; f"
    # Delete the remote version of the current branch
    unpublish = "!f() { git push origin --delete ${1-$(git branch-name)}; }; f"

    # Unstage any files that have been added to the staging area
    unstage = reset HEAD
    unadd = reset HEAD

    # Checkout our version of a file and add it
    ours = "!f() { git checkout --ours $@; }; f"
    # Checkout their version of a file and add it
    theirs = "!f() { git checkout --theirs $@; }; f"

    # Show commit log as a graph
    graphlog = log --pretty=oneline -n 500 --graph --abbrev-commit

    # Check to see how to commits are related.
    is-ancestor = "!f() { \
        if [ $# -ne 2 ]; then \
            echo \"usage: git is-ancestor <REV1> <REV2>\n\"; \
            exit 2; \
        fi; \
        if $( git merge-base --is-ancestor $1 $2 ); then \
            echo \"$1 is an ancestor of $2\"; \
            exit 0; \
        elif $( git merge-base --is-ancestor $2 $1 ); then \
            echo \"$2 is an ancestor of $1\"; \
            exit 0; \
        else \
            echo \"$1 and $2 are not related\"; \
            exit 1; \
        fi \
    }; \
    f"
	oldest-ancestor = !zsh -c 'diff --old-line-format= --new-line-format= <(git rev-list --first-parent \"${1:-master}\") <(git rev-list --first-parent \"${2:-HEAD}\") | head -1' -
	conflicts = !git ls-files -u | cut -f 2 | sort -u

[apply]
	# Detect whitespace errors when applying a patch
	whitespace = fix

[core]
	# Treat spaces before tabs, lines that are indented with 8 or more spaces, and all kinds of trailing whitespace as an error
	whitespace = space-before-tab,indent-with-non-tab,trailing-space
    abbrev = 12
[color]
	# Use colors in Git commands that are capable of colored output when outputting to the terminal
	ui = auto
[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green
[color "diff"]
	meta = yellow bold
	frag = magenta bold
	old = red bold
	new = green bold
[color "status"]
	added = yellow
	changed = green
	untracked = cyan
[merge]
	# Include summaries of merged commits in newly created merge commit messages
	log = true

[push]
	default = simple
[mergetool "Kaleidoscope"]
    cmd = ksdiff --merge --output \"$MERGED\" --base \"$BASE\" -- \"$LOCAL\" --snapshot \"$REMOTE\" --snapshot
    trustexitcode = true
[merge]
    log = true
    tool = Kaleidoscope
[difftool "Kaleidoscope"]
    cmd = ksdiff --partial-changeset --relative-path \"$MERGED\" -- \"$LOCAL\" \"$REMOTE\"
[difftool]
    prompt = false
[mergetool]
    prompt = false
[diff]
    tool = Kaleidoscope
[user]
	name = Itay Neeman
	email = ineeman@splunk.com
[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path = 
[mergetool "sourcetree"]
	cmd = /opt/homebrew-cask/Caskroom/sourcetree/2.0.2/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
[credential]
	helper = osxkeychain
[http]
	sslVerify = true
